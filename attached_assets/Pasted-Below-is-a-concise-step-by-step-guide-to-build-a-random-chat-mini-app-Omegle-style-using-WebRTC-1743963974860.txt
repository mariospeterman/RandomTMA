Below is a concise, step‐by‐step guide to build a “random chat” mini app (Omegle‑style) using WebRTC. In our example, we’ll use the lightweight “simple‑peer” library (which many developers favor for one‑to‑one connections) along with a Node.js signaling server to pair random users. (Note: While libraries like PeerJS wrap more functionality—including built‑in signaling—simple‑peer gives you fine‑grained control and scales well for 1:1 video calls.)

---

### 1. Requirements and Overview
- **Goal:** Allow users to click “start” and be paired with a random other user for a live video (and audio) session.
- **Architecture:**  
  • **Signaling Server:** A lightweight Node.js server (using Socket.io) to exchange connection info.  
  • **Client:** A web page that uses the browser’s getUserMedia API and simple‑peer to create a direct P2P connection.
- **Library Choice:**  
  • **simple‑peer:** A minimal, battle‑tested library that abstracts WebRTC connections.  
  • (Alternative “peers” libraries like PeerJS add extra features but may be heavier.)

---

### 2. Set Up the Signaling Server
- **Step 2.1:** Create a new Node.js project.
  - Run:  
    ```bash
    mkdir random-video-chat
    cd random-video-chat
    npm init -y
    npm install express socket.io
    ```
- **Step 2.2:** Write a simple signaling server (server.js) that:
  - Accepts client connections via Socket.io.
  - Maintains a “waiting room” for unmatched peers.
  - When a new client connects:
    - If another is waiting, pair them (emit a “match” event with each other’s signaling data).
    - Otherwise, add the client to the waiting list.
  
  _Example (pseudo‑code):_
  ```js
  const express = require('express');
  const http = require('http');
  const socketIo = require('socket.io');
  
  const app = express();
  const server = http.createServer(app);
  const io = socketIo(server);
  
  // Serve static files from /public
  app.use(express.static('public'));
  
  // Store a waiting socket (for simple pairing)
  let waitingSocket = null;
  
  io.on('connection', (socket) => {
    console.log('New client connected:', socket.id);
  
    // When a client signals, forward the signal to the peer.
    socket.on('signal', (data) => {
      if (socket.peerId) {
        io.to(socket.peerId).emit('signal', data);
      }
    });
  
    // When ready, try to match this client with a waiting one.
    if (waitingSocket) {
      // Pair the waiting client with this socket.
      socket.peerId = waitingSocket.id;
      waitingSocket.peerId = socket.id;
      // Notify both that they are matched.
      socket.emit('match', { initiator: false });
      waitingSocket.emit('match', { initiator: true });
      waitingSocket = null;
    } else {
      waitingSocket = socket;
    }
  
    socket.on('disconnect', () => {
      console.log('Client disconnected:', socket.id);
      if (waitingSocket && waitingSocket.id === socket.id) {
        waitingSocket = null;
      }
      // Optionally notify the paired peer about disconnect.
    });
  });
  
  server.listen(3000, () => {
    console.log('Signaling server listening on port 3000');
  });
  ```

---

### 3. Build the Client Side
- **Step 3.1:** Create a `/public` folder with an HTML file (index.html) that:
  - Includes a “start chat” button.
  - Loads Socket.io client script and simple‑peer (via npm bundle or CDN).
  
  _Example (index.html):_
  ```html
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Random Video Chat</title>
  </head>
  <body>
    <h1>Random Video Chat</h1>
    <video id="localVideo" autoplay muted style="width:300px;"></video>
    <video id="remoteVideo" autoplay style="width:300px;"></video>
    <button id="startBtn">Start Chat</button>
  
    <!-- Socket.io and simple-peer (CDN links or bundle them) -->
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/simple-peer@9.11.1/simplepeer.min.js"></script>
    <script src="client.js"></script>
  </body>
  </html>
  ```

- **Step 3.2:** In `client.js`, implement:
  - On “Start Chat” click, get media stream (camera/mic) via `navigator.mediaDevices.getUserMedia`.
  - Connect to the signaling server.
  - Wait for the “match” event; use the provided initiator flag to decide who creates the offer.
  - Create a simple‑peer instance with the media stream.
  - On peer “signal” events, send signaling data via Socket.io.
  - On receiving a “signal” message, pass it to your peer instance.
  - On peer “stream” events, display the remote video.
  
  _Example (client.js):_
  ```js
  const socket = io();
  let peer;
  const localVideo = document.getElementById('localVideo');
  const remoteVideo = document.getElementById('remoteVideo');
  const startBtn = document.getElementById('startBtn');
  let localStream;
  
  startBtn.onclick = async () => {
    // Get camera and mic
    try {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideo.srcObject = localStream;
      // Notify server that client is ready (matching is automatic on connection)
      startBtn.disabled = true;
    } catch (err) {
      console.error('Error accessing media devices.', err);
    }
  };
  
  // When matched, create a peer instance.
  socket.on('match', (data) => {
    console.log('Matched! Initiator:', data.initiator);
    peer = new SimplePeer({
      initiator: data.initiator,
      trickle: false,
      stream: localStream,
    });
  
    peer.on('signal', (signalData) => {
      socket.emit('signal', signalData);
    });
  
    peer.on('stream', (stream) => {
      remoteVideo.srcObject = stream;
    });
  });
  
  // When receiving signaling data from server, pass it to peer.
  socket.on('signal', (data) => {
    if (peer) {
      peer.signal(data);
    }
  });
  ```

---

### 4. Random Pairing and Connection Flow
- When a client connects to your signaling server, check if another is waiting:
  - If so, pair them; the first paired client becomes the initiator (creates the offer) while the second waits for the offer.
- Once paired, the two clients exchange signaling data via Socket.io until the WebRTC connection is established.
- Direct P2P video and audio streams are then exchanged directly between the browsers.

---

### 5. Run and Test Your App
- **Step 5.1:** Start your signaling server:
  ```bash
  node server.js
  ```
- **Step 5.2:** Open your browser to `http://localhost:3000` in two separate tabs (or devices).
- **Step 5.3:** Click “Start Chat” in each window. They will be matched automatically and the peer connection will be established.
- **Step 5.4:** Verify that local and remote video streams appear in the respective video elements.

---

### Scaling & Considerations
- **Signaling Server Scaling:** For many users, use a scalable Socket.io solution (or multiple servers behind a load balancer).
- **Direct Connections:** Since the video/audio streams go directly between peers, scaling is mostly limited by your signaling server.
- **NAT Traversal:** In production, add STUN (and TURN) servers in your simple‑peer configuration to handle NAT/firewall issues.

---

This guide provides a lightweight blueprint to build a random live-stream chat app using WebRTC with simple‑peer. Adjust and extend as needed (e.g., add UI polish, error handling, disconnect logic) to create a production‑ready version. Happy coding!